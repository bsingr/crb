crb
===

  An irb console for cucumber world


Features
========

  * Can define steps interactively
  * Can execute steps interactively like debugger
  * Can share cuke world and irb context in a same object
  * Can see instance variables of step files via irb
  * Supported hooks (but only before/after without parameters)


Usage
=====

  Use 'crb' command as same as 'cucumber' command
  % crb (... cucumber options ...)

  And then you are in cucumber world via irb


Example
=======

  % cd examples/i18n/en
  % crb
  irb(crb:3):001:0>
         ^^^ this means a number of defined steps.

  irb(crb:3):001:0> given "i have entered 3"
  undefined step: "i have entered 3"
  => #<cucumber::undefined: undefined step: "i have entered 3">

  irb(crb:3):002:0> given "i have entered 3 into the calculator"
  => [3]

  irb(crb:3):003:0> given "i have entered 5 into the calculator"
  => [3, 5]

  irb(crb:3):004:0> then "i press add"
  => 8

  irb(crb:3):005:0> @calc
  => #<calculator:0x7faa0a3e5218 @args=[3, 5]>


i18n
====

  i18n keywords are also available.

  % cd examples/i18n/ja
  % crb
  irb(crb:3):001:0> 前提 "3 を入力"
  => [3]
  irb(crb:3):002:0> @calc
  => #<calculator:0x7ff45ecdbc70 @args=[3]>


custom
======

  % mkdir my-project
  % crb my-project
  irb(crb:0):001:0> given "ab"
  undefined step: "ab"
  => #<cucumber::undefined: undefined step: "ab">
  irb(crb:0):002:0> given(/^(..)$/){|i| p "two chars for you! #{i}"}
  => "/^(..)$/ is defined"
  irb(crb:1):003:0> given "ab"
  "two chars for you! ab"


world methods
=============

  above crb(irb) context is a same object with cuke's world.
  and there are following additional methods.

    * before : execute before hooks. returns message (string)
    * after  : execute after  hooks. returns message (string)
    * steps  : returns step definitions (array[rbstepdefinition])
    * runtime: returns runtime object (crb::runtime)
    * hooks  : returns hooks (hash[type=>array[rbhook]])
    * rb     : returns ruby language support object (rblanguage)


restricted
==========

  * hooks are not called automatically because crb is free from
    scenarios. otherwise if hooks are called in each invokes,
    we'll never succeed to "add" operation in above calculator.

  * "before", "after" methods are the manual triggers for hooks.
    and "ctl-c" is binded as "before" filter too.

  * to implement crb, there are many ugly codes that closely
    depend on cuke's internal structures like private methods
    and instance vars. so it'll break soon after cuke's update.


environment
===========

  Tested on ruby-1.8.7, cucumber-1.0.0


Author
======

  maiha@wota.jp

